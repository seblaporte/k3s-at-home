---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 19.2.2
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 1m
  install:
    crds: Create
  upgrade:
    crds: CreateReplace
  values:
    defaultRules:
    create: true
    rules:
      alertmanager: false
      etcd: false
      general: true
      k8s: true
      kubeApiserver: false
      kubeApiserverAvailability: false
      kubeApiserverError: false
      kubeApiserverSlos: false
      kubelet: true
      kubePrometheusGeneral: true
      kubePrometheusNodeAlerting: false
      kubePrometheusNodeRecording: false
      kubernetesAbsent: false
      kubernetesApps: true
      kubernetesResources: true
      kubernetesStorage: true
      kubernetesSystem: true
      kubeScheduler: false
      kubeStateMetrics: false
      network: true
      node: true
      prometheus: true
      prometheusOperator: true
      time: true
    alertmanager:
      enabled: false
    kubeEtcd:
      enabled: false
    prometheusOperator:
      enabled: true
      logLevel: error
    prometheus:
      prometheusSpec:
        logLevel: error
        resources:
          requests:
            cpu: 500m
            memory: 1024Mi
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "nfs-client"
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 50Gi
        podMonitorSelector:
          matchLabels:
            app.kubernetes.io/part-of: flux
    grafana:
      sidecar:
        dashboards:
          searchNamespace: ALL
      adminUser: ${SECRET_GRAFANA_ADMIN_USERNAME}
      adminPassword: ${SECRET_GRAFANA_ADMIN_PASSWORD}
      ingress:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          cert-manager.io/cluster-issuer: "letsencrypt-production"
        hosts:
          - "monitoring.${SECRET_DOMAIN}"
        tls:
          - secretName: monitoring-tls-secret
            hosts:
              - "monitoring.${SECRET_DOMAIN}"
